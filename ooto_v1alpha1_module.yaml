apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: intel-dgpu-driver-container-kmmo
  name: intel-dgpu-driver-container-kmmo
  namespace: intel-dgpu
spec: {}
---
apiVersion: ooto.sigs.k8s.io/v1alpha1
kind: Module
metadata:
  name: intel-dgpu-kmmo
  namespace: intel-dgpu
spec:
        #devicePlugin:
        #image: some-image
        #name: overwritten-anyway
  serviceAccountName: intel-dgpu-sa
  driverContainer:
    image:
    name: intel-dgpu-driver-container-kmmo
    securityContext:
      seLinuxOptions:
        type: spc_t
      capabilities:
        add: [SYS_MODULE]
      #privileged: true
    command: [sleep, infinity]
    #lifecycle:
    #  postStart:
    #    exec:
    #      command: [modprobe, -vd, /opt, i915]
    #  preStop:
    #    exec:
    #     command: [modprobe, -rvd, /opt, i915]
  kernelMappings:
    #- literal: 4.18.0-305.45.1.el8_4.x86_64
    - regexp: '^.*\.x86_64$'
      containerImage: image-registry.openshift-image-registry.svc:5000/intel-dgpu/intel-dgpu-driver-container-kmmo:$KERNEL_FULL_VERSION
      build:
        buildArgs:
            - name: BISON_VERSION
              value: "3.8"
            - name: FLEX_VERSION
              value: "2.6.4"
        pull:
          insecureSkipTLSVerify: true
          insecure: false
          secret:
            name: default-dockercfg-wgt4l
        push:
          insecureSkipTLSVerify: true
          insecure: false
          secret:
            name: kmmo-demo # Service Account permission workaround for OCP, manually adding build secret to default SA

        dockerfile: |
          # DTK base image dynamically retrieved from in cluster registry
          FROM image-registry.openshift-image-registry.svc:5000/openshift/driver-toolkit:latest

          WORKDIR /build/
          RUN dnf install -y patch gcc m4 make tar kmod && dnf clean all

          # install bison
          ARG BISON_VERSION
          ADD http://ftp.gnu.org/gnu/bison/bison-$BISON_VERSION.tar.gz /bison/
          RUN tar -xzvf /bison/bison-$BISON_VERSION.tar.gz -C /bison/ && cd /bison/bison-$BISON_VERSION && ./configure && make && make install

          # install flex
          ARG FLEX_VERSION
          ADD https://github.com/westes/flex/files/981163/flex-$FLEX_VERSION.tar.gz /flex/
          RUN tar -xzvf /flex/flex-$FLEX_VERSION.tar.gz -C /flex/ && cd /flex/flex-$FLEX_VERSION && ./configure && make && make install

          # build cse driver, latest version, public release
          RUN git clone -b rhel85 https://github.com/intel-gpu/intel-gpu-cse-backports.git && cd intel-gpu-cse-backports && make && make modules_install

          # build pmt driver, latest version, public release
          RUN git clone -b rhel85 https://github.com/intel-gpu/intel-gpu-pmt-backports.git && cd intel-gpu-pmt-backports && make && make modules_install

          # build i915 driver,latest RHEL8.6 release
          RUN git clone -b redhat/main https://user:ENTER_TOKEN@github.com/intel.../drivers.gpu.....git && cd drivers.gpu.kernel.backporting.releases && export LEX=flex; export YACC=bison && cp defconfigs/drm .config && make olddefconfig && make -j $(nproc) && make modules_install

          # build firmware, latest version, public release
          RUN git clone https://github.com/intel-gpu/intel-gpu-firmware.git

          # create output /opt/lib directories
          RUN mkdir -p /opt/lib/modules/$KERNEL_FULL_VERSION/updates/
          RUN mkdir -p /opt/lib/firmware/updates/i915/

          # copy ko files to output directories
          RUN cp -r /lib/modules/$KERNEL_FULL_VERSION/updates/* /opt/lib/modules/$KERNEL_FULL_VERSION/updates/
          RUN cp -r /build/intel-gpu-firmware/firmware/*.bin /opt/lib/firmware/updates/i915/

          RUN cp -r /build/intel-gpu-pmt-backports/bin/* /opt/lib/modules/$KERNEL_FULL_VERSION/updates/
          RUN cp -r /build/intel-gpu-cse-backports/bin/* /opt/lib/modules/$KERNEL_FULL_VERSION/updates/

          RUN depmod -b /opt
  selector:
          kubernetes.io/hostname: "worker1-gobi"
          #intel.feature.node.kubernetes.io/gpu: 'true'
